//
//  DiaryView.swift
//  GURUiosproject_BLANK
//
//  Created by Jake on 2022/01/26.
//

import UIKit
import CoreData

class DiaryView:UIViewController, UITextFieldDelegate, UITextViewDelegate {
    @IBOutlet weak var DiaryTextField: UITextField!
    @IBOutlet weak var subBtn: UIButton!{
        didSet{
            //subBtn.isEnabled = false
        }
    }
    
    @IBOutlet weak var DiaryLabel: UILabel!
    
    //제목
    @IBOutlet weak var titleTF: UITextField!
    
    //내용
    @IBOutlet weak var descTV: UITextView!
    
    var selectedDiary: Diary? = nil
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if(selectedDiary != nil){
            titleTF.text = selectedDiary?.title
            descTV.text = selectedDiary?.desc
        }
        //버튼 비활성화
        //self.DiaryTextField.delegate = self
        self.descTV.delegate = self
        
    }
    //텍스트 필드에서 텍스트 뷰로 바꿔서 실행 안할 듯
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        print("range: ", range)
        if range.location == 0 && range.length != 0 {
            self.subBtn.isEnabled = false
        } else {
            self.subBtn.isEnabled = true
        }
        return true
    }
    
    //save도 같이 해야 함 => saveAction
    @IBAction func DiaryCheck(_ sender: Any) {//원래 UIButton
        print("aaa")
        //지금 듣기 / 나중에 듣기  선택
        let alert = UIAlertController(title: "BLANK", message: "오늘의 BLANK를 채울 노래가 추천되었어요. 지금 들어보시는거 어떠세요?", preferredStyle: .alert)
        
        let ok = UIAlertAction(title: "지금 듣기", style: .default) { (ok) in
            let appDelegate = UIApplication.shared.delegate as! AppDelegate
            let context: NSManagedObjectContext = appDelegate.persistentContainer.viewContext
            if(self.selectedDiary == nil){
                let entity = NSEntityDescription.entity(forEntityName: "Diary", in: context)
                let newDiary = Diary(entity: entity!, insertInto: context)
                newDiary.id = diaryList.count as NSNumber
                newDiary.title = self.titleTF.text
                newDiary.desc = self.descTV.text
                do{
                    try context.save()
                    diaryList.append(newDiary)
                    self.navigationController?.popViewController(animated: true)
 
                }
                catch{
                    print("context save error")
                }
            } else{//edit
                let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Diary")
                do{
                    let results:NSArray = try context.fetch(request) as NSArray
                    for result in results{
                        let diary = result as! Diary
                        if(diary == self.selectedDiary){
                            diary.title = self.titleTF.text
                            diary.desc = self.descTV.text
                            try context.save()
                            self.navigationController?.popViewController(animated: true)
                        }
                    }
                }catch{
                    print("Fetch Failed")
                }
            }
        }
        
        //나중에 듣기
        let cancel = UIAlertAction(title: "나중에 듣기", style: .default){ (cancel) in
            //데이터베이스에 저장
            let appDelegate = UIApplication.shared.delegate as! AppDelegate
            let context: NSManagedObjectContext = appDelegate.persistentContainer.viewContext
            if(self.selectedDiary == nil){
                let entity = NSEntityDescription.entity(forEntityName: "Diary", in: context)
                let newDiary = Diary(entity: entity!, insertInto: context)
                newDiary.id = diaryList.count as NSNumber
                newDiary.title = self.titleTF.text
                newDiary.desc = self.descTV.text
                do{
                    try context.save()
                    diaryList.append(newDiary)
                    self.navigationController?.popViewController(animated: true)
                }
                catch{
                    print("context save error")
                }
            } else{//edit
                let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Diary")
                do{
                    let results:NSArray = try context.fetch(request) as NSArray
                    for result in results{
                        let diary = result as! Diary
                        if(diary == self.selectedDiary){
                            diary.title = self.titleTF.text
                            diary.desc = self.descTV.text
                            try context.save()
                            self.navigationController?.popViewController(animated: true)
                        }
                    }
                }catch{
                    print("Fetch Failed")
                }
            }
            //스토리보드 보기2
            let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
            //(화면에 보일)홈화면 스토리보드
            let settingboard = storyboard.instantiateViewController(withIdentifier: "diarylist")
            //설정한 뷰 컨트롤러 보여주기 -> present
            settingboard.modalPresentationStyle = .fullScreen
            self.present(settingboard,animated: true,completion: nil)
        }
        
        
        alert.addAction(cancel)
        
        alert.addAction(ok)
        
        self.present(alert, animated: true, completion: nil)
    }
    
    @IBAction func DeleteDiary(_ sender: Any) {
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let context: NSManagedObjectContext = appDelegate.persistentContainer.viewContext
        
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Diary")
        do{
            let results:NSArray = try context.fetch(request) as NSArray
            for result in results{
                let diary = result as! Diary
                if(diary == self.selectedDiary){
                    diary.deletedDate = Date()
                    try context.save()
                    self.navigationController?.popViewController(animated: true)
                }
            }
        }catch{
            print("Fetch Failed")
        }
        
    }
    
    
    /*@IBAction func DeleteDiary(_ sender: Any) {
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let context: NSManagedObjectContext = appDelegate.persistentContainer.viewContext
        
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Diary")
        do{
            let results:NSArray = try context.fetch(request) as NSArray
            for result in results{
                let diary = result as! Diary
                if(diary == self.selectedDiary){
                    //diary.deletedDate = Diary()
                    try context.save()
                    self.navigationController?.popViewController(animated: true)
                }
            }
        }catch{
            print("Fetch Failed")
        }
    }*/
    

}
